{"version":3,"sources":["components/Search.js","api/youtube.js","components/Video.js","components/VideoList.js","components/VideoPlayer.js","App.js","reportWebVitals.js","index.js"],"names":["Search","state","title","onSearchChanged","event","target","value","console","log","setState","onSubmit","preventDefault","props","onSearch","className","this","onChange","type","placeholder","Button","variant","onClick","React","Component","axios","create","baseURL","params","part","maxResults","key","headers","constructVideoTitles","vidoesData","onVideoSelected","map","index","imageurl","snippet","id","videoIdObj","videoId","selectVideo","style","thumbnails","high","url","backgroundImage","backgroundSize","backgroundPosition","height","position","Video","data","VideoList","padding","length","VideoPlayer","src","allowFullScreen","App","videoMetaInfo","selectedVideoId","keyword","a","youtubeApi","get","q","response","items","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.583aaf6f.chunk.js","sourcesContent":["import React from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nclass Search extends React.Component {\r\n    state={ title: \"\" }\r\n\r\n    onSearchChanged = event => {\r\n\r\n        const title = event.target.value;\r\n\r\n        console.log(title)\r\n\r\n        this.setState({ title: title })\r\n    };\r\n\r\n    onSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        this.props.onSearch(this.state.title);\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-form\">\r\n                            <input\r\n                                value={this.state.title}\r\n                                onChange={this.onSearchChanged} \r\n                                type=\"text\"\r\n                                placeholder=\"Enter Search keyword\"\r\n                                className=\"search-field\"\r\n                            />\r\n                            <Button variant={\"primary\"} onClick={this.onSubmit}> Search </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import axios from 'axios'\r\n\r\nconst key = \"AIzaSyANWdoEml_p8g6Kx6NwBQFiw4bXkRCKYfE\"\r\n\r\nexport default axios.create({\r\n    baseURL:'https://www.googleapis.com/youtube/v3/',\r\n    params: {\r\n        part: 'snippet',\r\n        maxResults: 20,\r\n        key: key,\r\n        type: 'video'\r\n    },\r\n    headers: {}\r\n});","import React from \"react\";\r\n\r\nfunction selectVideo(videoIdObj, onVideoSelected) {\r\n  onVideoSelected(videoIdObj.videoId);\r\n}\r\nfunction getCss(imageurl) {\r\n  const _styles = {\r\n    backgroundImage: `url(${imageurl})`,\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center center\",\r\n    height: \"180px\",\r\n    position: \"relative\"\r\n  };\r\n  return _styles;\r\n}\r\n\r\nfunction constructVideoTitles(vidoesData, onVideoSelected) {\r\n\r\n  return vidoesData.map(({ snippet, id }, index) => {\r\n    return (\r\n      <div\r\n        className=\"video\"\r\n        key={index}\r\n        onClick={() => selectVideo(id, onVideoSelected)}>\r\n        <div style={getCss(snippet.thumbnails.high.url)} key={index} />\r\n        <p className=\"title\">{snippet.title}</p>\r\n      </div>\r\n    );\r\n  });\r\n}\r\nconst Video = ({ data, onVideoSelected }) => {\r\n  return <>{constructVideoTitles(data, onVideoSelected)}</>;\r\n};\r\n\r\nexport default Video;","import React from 'react';\r\nimport Video from './Video';\r\n\r\nconst VideoList = ({ data, onVideoSelected }) => {\r\n    return (\r\n        <div className=\"video-list\" style={{padding: 40}}> \r\n            { (data.length > 0) ? <h2>Your search results</h2> : \"\" } \r\n            {console.log(data.length)}\r\n            <Video data={data} onVideoSelected={onVideoSelected} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoList;","import React from 'react';\r\nimport _video from '../styles/_video.css'\r\nconst VideoPlayer = ({videoId}) => {\r\n    if (!videoId) {\r\n        return (\r\n            <>\r\n                <h2 className=\"video-text\">Search for any video on youtube!</h2>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"containerer\">\r\n            <iframe\r\n                title={videoId}\r\n                 className=\"responsive-iframe\"\r\n                 src={`https://www.youtube.com/embed/${videoId}`}\r\n                 allowFullScreen\r\n            />\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default VideoPlayer;","import './App.scss';\nimport Search from './components/Search'\nimport youtubeApi from './api/youtube'\nimport React from 'react'\nimport VideoList from './components/VideoList'\nimport VideoPlayer from './components/VideoPlayer'\n\nclass App extends React.Component {\n    state = {\n      videoMetaInfo: [],\n      selectedVideoId: null\n    }\n\n    onVideoSelected = videoId => {\n      this.setState({\n        selectedVideoId: videoId\n      })\n    }\n\n    onSearch = async keyword => {\n      const response = await youtubeApi.get(\"/search\", {\n        params: {\n          q: keyword\n        }\n      });\n      this.setState({\n        videoMetaInfo: response.data.items,\n        selectedVideoId: response.data.items[0].id.videoId\n      });\n      console.log(this.state)\n    }\n    render() {\n    return (\n      <div className=\"container\">\n        <div className=\"left-scene\">\n          <div className=\"form-search divider div-transparent\">\n            <Search onSearch={this.onSearch} />\n          </div>\n            <VideoPlayer videoId={this.state.selectedVideoId} />\n          </div>\n\n            <div className=\"right-scene\">\n              <VideoList onVideoSelected={this.onVideoSelected}\n              data={this.state.videoMetaInfo}\n              />\n            </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}